netty可以简单的认为是一个java网络应用开发框架
1.异步
2.事件驱动
3.基于nio

适用于
服务端
客户端
TCP/UDP

netty核心
支持网络传输使用的各种方便又高效的数据结构 byte buffer
统一的网络通信api  universal communication api
netty本身的事件模型  extensible event model
传输服务层
socket & datagram
http tunnel
in-vm pipe
协议支持层
http&websocket
ssl&startTls
google protobuf
zlib/gzip compression
large file transfer
rtsp
legacy text & binary protocols with unit testability


netty优点
高性能的协议服务器
高吞吐  nio  可容纳更多的网络连接请求
低延迟  nio 可以更快的去处理我们的业务请求，更充分和合理的使用我们的系统资源
低开销  由于更充分和合理的使用我们的系统资源，它占用的系统资源和开销就相对比较低
零拷贝  不再需要把用户空间的缓冲区的数据和我们内核空间的缓冲区的数据来回之间进行拷贝，直接共用同一片内存
可扩容 byte buffer  可扩容

松耦合：网络和业务逻辑分离
使用方便，可维护性好

协议兼容性
兼容大部分通用协议
支持自定义协议

嵌入式：
Http server
Https server
WebSocket Server 使用的越来越广泛，建立在http 1.1基础上
复用了http1.1的协议下面的tcp的通道
Tcp Server
Udp server
In VM Pipe

netty基本概念
channel           通道，java nio中的基础概念，代表一个打开的连接，可执行读取/写入io操作
                  netty对channel的所有的io操作都是非阻塞的
channelFuture     java的future接口，只能查询操作的完成情况，或者阻塞当前线程等待操作完成
                  netty封装一个channelFuture接口
                  我们可以将回调方法传给channelFuture，在操作完成时自动执行
event&handler     netty基于事件驱动，事件和处理器可以关联到入站和出站数据流
encoder&decoder   处理网络io时，需要进行序列化和反序列化，转换java对象与字节流
                  对入站数据进行解码，基类是ByteToMessageDecoder
                  对出站数据进行编码，基类是MessageToByteEncoder
channelPipeline   数据处理管道就是事件处理器链
                  有顺序，同一channel的出站处理器和入站处理器在同一个列表中

event & handler
入站事件：
通道激活和停用
读操作事件
异常事件
用户事件

出站事件：
打开连接
关闭连接
写入数据
刷新数据


事件处理程序接口
ChannelHandler
ChannelOutboundHandler
ChannelInboundHandler

适配器(空实现，需要继承使用):
ChannelInboundHandlerAdapter
ChannelOutboundHandlerAdapter

netty应用组成：
网络事件
应用程序逻辑事件
事件处理程序


















