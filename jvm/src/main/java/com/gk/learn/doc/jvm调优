jvm分配速率：年轻代上对象的分配  上一次垃圾收集后与下一次gc开始之前年轻代的使用量，两者的差值除以时间就是分配速率

jvm提升速率：从年轻代晋升对象到老年代的速率

分配速率过高就会严重影响程序的性能，在jvm中可能会导致巨大的GC开销

正常系统： 分配速率较低 ~ 回收速率 健康
内存泄漏  分配速率 持续大于 回收速率 不健康
性能劣化  分配速率很高 ~ 回收速率 亚健康

jvm会将长时间存活的对象从年轻代提升到老年代。根据分代假设，可能存在一种情况，老年代中不仅有存活时间长的对象，也有可能有存活时间短的对象。
这就是过早提升：对象存活时间还不够长的时候就被提升到了老年代

major gc 不是为了频繁回收设计的，但major gc现在也要清理这些生命短暂的对象，就会导致GC暂停时间过长，这会严重影响系统的吞吐量

一般提升速率过高的症状表现为以下形式：
1.短时间内频繁的执行Full GC
2.每次full GC后老年代的使用率都很低，在10~20%
3.提升速率接近分配速率

模拟方法：
-Xmx24m -XX:NewSize=16m -XX:MaxTenuringThreshold=1
减少old区的容量，晋升阈值设置为1，快速填满old区

解决方案：
1.增加年轻代的大小，设置jvm启动参数，类似这样：
-Xmx 64m -XX:NewSize=32m 程序在执行时，Full GC的次数自然会较少很多，只是会对minor GC的持续时间产生影响

2.减少每次业务处理使用的内存数量  数据结构的合理化,减少对象创建